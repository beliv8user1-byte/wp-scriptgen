import * as cheerio from "cheerio";
import nodemailer from "nodemailer";

/* ---------------------------- CONFIG / PROMPT ---------------------------- */
const SCRIPT_INSTRUCTIONS = (process.env.SCRIPT_INSTRUCTIONS || `
You are an Explainer Video Script Generator Expert. Return a concise, 60-second script with clearly labeled sections.
Required sections and order:
HOOK (0â€“8s)
PROBLEM (8â€“18s)
SOLUTION (18â€“36s)
TRUST (36â€“48s)
CLOSE (48â€“60s)

Rules:
- Conversational, no jargon
- Include timestamps
- Do not exceed 60 seconds
`).trim();

/* ------------------------------- HELPERS -------------------------------- */
function youtubeId(url = "") {
Â  const m =
Â  Â  url.match(/(?:youtube\.com\/.*[?&]v=|youtu\.be\/)([A-Za-z0-9_-]+)/i) ||
Â  Â  url.match(/youtube\.com\/shorts\/([A-Za-z0-9_-]+)/i);
Â  return m ? m[1] : "";
}

// Generates the left-thumb / right-copy + purple button rows
function renderVideoRows(videos = []) {
Â  return videos
Â  Â  .map((v, i) => {
Â  Â  Â  const id = youtubeId(v.url);
Â  Â  Â  const thumb = id ? `https://img.youtube.com/vi/${id}/hqdefault.jpg` : "";
Â  Â  Â  const title = v.title?.trim() || `Reference Video ${i + 1}`;
Â  Â  Â  const safeUrl = v.url || "#";
Â  Â  Â  return `
Â  Â  Â  Â  <table width="100%" cellpadding="0" cellspacing="0" role="presentation" style="margin:0 0 16px 0;">
Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  <!-- Thumbnail -->
Â  Â  Â  Â  Â  Â  <td width="42%" valign="top" style="padding:0 12px 0 0;">
Â  Â  Â  Â  Â  Â  Â  <a href="${safeUrl}" target="_blank" style="text-decoration:none;">
Â  Â  Â  Â  Â  Â  Â  Â  <img src="${thumb}" alt="Video thumbnail" width="100%" style="display:block; width:100%; max-width:240px; border-radius:12px;">
Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  <!-- Title + Button -->
Â  Â  Â  Â  Â  Â  <td width="58%" valign="middle" style="padding:0 0 0 12px;">
Â  Â  Â  Â  Â  Â  Â  <h4 style="margin:0 0 10px 0; font-size:16px; line-height:1.4; color:#0f172a; font-weight:700;">
Â  Â  Â  Â  Â  Â  Â  Â  ${title}
Â  Â  Â  Â  Â  Â  Â  </h4>
Â  Â  Â  Â  Â  Â  Â  <a href="${safeUrl}" target="_blank"
Â  Â  Â  Â  Â  Â  Â  Â  Â style="display:inline-block; padding:10px 14px; border-radius:9999px; background:#7c3aed; color:#ffffff; font-size:14px; font-weight:600; text-decoration:none;">
Â  Â  Â  Â  Â  Â  Â  Â  Watch on YouTube
Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  </table>
Â  Â  Â  `;
Â  Â  })
Â  Â  .join("");
}

// Parse AI text into {HOOK, PROBLEM, SOLUTION, TRUST, CLOSE}
function parseScript(raw = "") {
Â  const sections = { HOOK: "", PROBLEM: "", SOLUTION: "", TRUST: "", CLOSE: "" };
Â  const rx = /(HOOK|PROBLEM|SOLUTION|TRUST|CLOSE)[^\n]*\n+([\s\S]*?)(?=\n(?:HOOK|PROBLEM|SOLUTION|TRUST|CLOSE)|$)/gi;
Â  let m;
Â  while ((m = rx.exec(raw))) {
Â  Â  const key = m[1].toUpperCase();
Â  Â  const val = (m[2] || "").trim();
Â  Â  if (sections[key] !== undefined) sections[key] = val;
Â  }
Â  // Fallback: if parsing failed, put the whole thing into SOLUTION
Â  if (!sections.HOOK && !sections.PROBLEM && !sections.SOLUTION && !sections.TRUST && !sections.CLOSE) {
Â  Â  sections.SOLUTION = raw.trim();
Â  }
Â  return sections;
}

function renderScriptMap(sections) {
Â  // compact, minimal, consistent spacing â€” email-safe table layout
Â  const row = (emoji, title, time, copy) => `
Â  Â  <tr>
Â  Â  Â  <td style="padding:12px 0; border-top:1px solid #eae7f9;">
Â  Â  Â  Â  <div style="font-size:15px; font-weight:700; color:#7c3aed; margin:0 0 6px 0;">
Â  Â  Â  Â  Â  ${emoji} ${title} <span style="font-weight:500; color:#6b7280;">(${time})</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div style="font-size:14px; line-height:1.6; color:#0f172a; margin:0;">${copy}</div>
Â  Â  Â  </td>
Â  Â  </tr>
Â  `;

Â  return `
Â  Â  <table width="100%" cellpadding="0" cellspacing="0" role="presentation"
Â  Â  Â  Â  Â  Â style="background:#f8f7ff; border:1px solid #eae7f9; border-radius:12px; padding:16px;">
Â  Â  Â  ${row(" ","HOOK","0â€“8s",sections.HOOK || "â€”")}
Â  Â  Â  ${row(" ","PROBLEM","8â€“18s",sections.PROBLEM || "â€”")}
Â  Â  Â  ${row(" ","SOLUTION","18â€“36s",sections.SOLUTION || "â€”")}
Â  Â  Â  ${row(" ","TRUST","36â€“48s",sections.TRUST || "â€”")}
Â  Â  Â  ${row(" ","CLOSE","48â€“60s",sections.CLOSE || "â€”")}
Â  Â  </table>
Â  `;
}

// Basic site text scrape (for better prompting)
async function scrapeWebsite(url) {
Â  try {
Â  Â  const res = await fetch(url);
Â  Â  const html = await res.text();
Â  Â  const $ = cheerio.load(html);
Â  Â  const textParts = [];
Â  Â  $("h1, h2, h3, p, meta[name='description']").each((_, el) => {
Â  Â  Â  const content = $(el).text() || $(el).attr("content");
Â  Â  Â  if (content && content.trim().length > 30) textParts.push(content.trim());
Â  Â  });
Â  Â  return textParts.slice(0, 30).join("\n\n");
Â  } catch (err) {
Â  Â  return `Error scraping site: ${err.message}`;
Â  }
}

// Gmail SMTP
async function sendEmail(to, subject, htmlContent) {
Â  const transporter = nodemailer.createTransport({
Â  Â  host: "smtp.gmail.com",
Â  Â  port: 465,
Â  Â  secure: true,
Â  Â  auth: {
Â  Â  Â  user: process.env.GMAIL_EMAIL,
Â  Â  Â  pass: process.env.GMAIL_PASSWORD,
Â  Â  },
Â  });

Â  await transporter.sendMail({
Â  Â  from: `"Explainer Script Generator" <${process.env.GMAIL_EMAIL}>`,
Â  Â  to,
Â  Â  subject,
Â  Â  html: htmlContent,
Â  });
}

/* ------------------------------- HANDLER -------------------------------- */
export async function handler(event) {
Â  if (event.httpMethod === "OPTIONS") {
Â  Â  return {
Â  Â  Â  statusCode: 200,
Â  Â  Â  headers: {
Â  Â  Â  Â  "Access-Control-Allow-Origin": process.env.ALLOWED_ORIGINS || "*",
Â  Â  Â  Â  "Access-Control-Allow-Methods": "POST, OPTIONS",
Â  Â  Â  Â  "Access-Control-Allow-Headers": "Content-Type",
Â  Â  Â  },
Â  Â  };
Â  }

Â  if (event.httpMethod !== "POST") {
Â  Â  return { statusCode: 405, body: "Method Not Allowed" };
Â  }

Â  try {
Â  Â  const body = JSON.parse(event.body || "{}");
Â  Â  const { business_name, website, linkedin_url, email } = body;

Â  Â  // Allow passing custom reference videos: [{title, url}]
Â  Â  const reference_videos = Array.isArray(body.reference_videos) && body.reference_videos.length
Â  Â  Â  ? body.reference_videos
Â  Â  Â  : [
Â  Â  Â  Â  Â  { url: "https://www.youtube.com/watch?v=C0L6WipiDM0" },
Â  Â  Â  Â  Â  { url: "https://www.youtube.com/watch?v=f63piAO9k1Y" },
Â  Â  Â  Â  Â  { url: "https://www.youtube.com/watch?v=GsiUzFcQGdo" },
Â  Â  Â  Â  ];

Â  Â  // Process video (mega card)
Â  Â  const processVideoUrl = body.process_video_url || "https://www.youtube.com/watch?v=lA1ibjcOwTY";
Â  Â  const processId = youtubeId(processVideoUrl);
Â  Â  const processThumb = processId ? `https://img.youtube.com/vi/${processId}/hqdefault.jpg` : "";

Â  Â  let scrapedContent = "";
Â  Â  if (website) scrapedContent = await scrapeWebsite(website);

Â  Â  const prompt = `
${SCRIPT_INSTRUCTIONS}

Company Details:
- Business Name: ${business_name || "N/A"}
- Website: ${website || "N/A"}
- LinkedIn: ${linkedin_url || "N/A"}

Extracted Website Content:
${scrapedContent}

Now, generate a structured 60-second explainer video script using the required section headings exactly.
`;

Â  Â  // Generate script
Â  Â  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: {
Â  Â  Â  Â  Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  model: process.env.OPENROUTER_MODEL || "gpt-4o-mini",
Â  Â  Â  Â  messages: [{ role: "user", content: prompt }],
Â  Â  Â  }),
Â  Â  });

Â  Â  const data = await response.json();
Â  Â  const scriptRaw =
Â  Â  Â  data?.choices?.[0]?.message?.content ||
Â  Â  Â  data?.choices?.[0]?.delta?.content ||
Â  Â  Â  "";

Â  Â  const scriptSections = parseScript(scriptRaw);
Â  Â  const scriptHTML = renderScriptMap(scriptSections);

Â  Â  /* --------------------------- EMAIL TEMPLATE --------------------------- */
Â  Â  const emailHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Motion Hatch Email</title>
  <style>
    body {
      font-family: Roboto, Arial, sans-serif;
      font-size: 16px;
      line-height: 28px;
      color: #000;
      margin: 0;
      padding: 0;
      background: #f8f8f8;
    }
    .container {
      width: 100%;
      max-width: 600px;
      margin: 20px auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }
    h1, h2, h3 {
      margin: 16px 0 8px;
    }
    a {
      color: #0B83FF;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .button {
      display: inline-block;
      background: #2BD5D4;
      color: #fff !important;
      padding: 12px 20px;
      border-radius: 6px;
      text-decoration: none;
      margin: 12px 0;
      font-weight: bold;
    }
    .footer {
      font-size: 13px;
      color: #666;
      text-align: center;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Hey Ab!</h1>
    <p>Over the next few days, I'm going to send you some of our best content and free resources. Enjoy!</p>
    <p>Today, I want to share the most helpful YouTube videos I've created to help you attract more clients.</p>
    <p><strong>Bookmark this email so you can come back to it!</strong></p>

    <h2>ðŸŽ¥ My Ultimate Guide to Getting Hired</h2>
    <p><a href="https://youtu.be/Xebd2eBWCSU" class="button">Watch on YouTube</a></p>

    <h2>No Motion Design Clients? Here's How to Fix It!</h2>
    <p><a href="https://youtu.be/Xebd2eBWCSU" class="button">Watch on YouTube</a></p>

    <h2>How I'd Start My Freelance Business in 2024</h2>
    <p><a href="https://youtu.be/M4UJw4V0iN8" class="button">Watch on YouTube</a></p>

    <h2>How I'd Get Direct Clients Starting From 0</h2>
    <p><a href="https://youtu.be/iXUVuzDDE7g" class="button">Watch on YouTube</a></p>

    <h2>How Iâ€™d Attract My Ideal Clients (without losing my current ones)</h2>
    <p><a href="https://youtu.be/KY2PD7jU0Sg" class="button">Watch on YouTube</a></p>

    <h2>How to Price Your Motion Design Work in 2024</h2>
    <p><a href="https://youtu.be/FId64n_zAXg" class="button">Watch on YouTube</a></p>

    <p>If you have any questions or need any help, just reply to this email. Iâ€™d love to help you with your motion design business!</p>

    <p>â€“ Hayley</p>

    <p>P.S. Looking for more? Visit my <a href="https://www.youtube.com/motionhatch">YouTube channel</a> or explore:</p>
    <ul>
      <li><a href="https://motionhatch.com/client-quest">Join Client Quest â€“ get regular high-paying clients</a></li>
      <li><a href="https://motionhatch.com/balanced-business-bootcamp">Balanced Business Bootcamp â€“ 12 months of mentorship</a></li>
      <li><a href="https://calendly.com/motionhatch/private-coaching">Work with me 1-1</a></li>
      <li><a href="https://motionhatch.notion.site/Newsletter-Sponsorship">Sponsor this newsletter</a></li>
    </ul>

    <div class="footer">
      Motion Hatch, 27 Old Gloucester Street, London, WC1N 3AX<br>
      <a href="#">Unsubscribe</a>
    </div>
  </div>
</body>
</html>

`;

Â  Â  // Send Email
Â  Â  if (email) {
Â  Â  Â  const subject = `${business_name || "Your Brand"} | Explainer Video Script Ã— Beliv8`;
Â  Â  Â  await sendEmail(email, subject, emailHTML);
Â  Â  }

Â  Â  return {
Â  Â  Â  statusCode: 200,
Â  Â  Â  headers: {
Â  Â  Â  Â  "Access-Control-Allow-Origin": process.env.ALLOWED_ORIGINS || "*",
Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  message: "Script generated and sent via email",
Â  Â  Â  Â  script: scriptRaw,
Â  Â  Â  Â  parsed_sections: scriptSections,
Â  Â  Â  Â  scraped_data: scrapedContent,
Â  Â  Â  }),
Â  Â  };
Â  } catch (err) {
Â  Â  return { statusCode: 500, body: JSON.stringify({ error: err.message }) };
Â  }
}
